name: face_check_in_flutter
description: "A new Flutter project."
# The following line prevents the package from being accidentally published to
# pub.dev using `flutter pub publish`. This is preferred for private packages.
publish_to: "none" # Remove this line if you wish to publish to pub.dev

# The following defines the version and build number for your application.
# A version number is three numbers separated by dots, like 1.2.43
# followed by an optional build number separated by a +.
# Both the version and the builder number may be overridden in flutter
# build by specifying --build-name and --build-number, respectively.
# In Android, build-name is used as versionName while build-number used as versionCode.
# Read more about Android versioning at https://developer.android.com/studio/publish/versioning
# In iOS, build-name is used as CFBundleShortVersionString while build-number is used as CFBundleVersion.
# Read more about iOS versioning at
# https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html
# In Windows, build-name is used as the major, minor, and patch parts
# of the product and file versions while build-number is used as the build suffix.
version: 1.0.0+1

environment:
  sdk: ">=3.7.0 <4.0.0"
  flutter: ">=3.29.0 <4.0.0"

# Dependencies specify other packages that your package needs in order to work.
# To automatically upgrade your package dependencies to the latest versions
# consider running `flutter pub upgrade --major-versions`. Alternatively,
# dependencies can be manually updated by changing the version numbers below to
# the latest version available on pub.dev. To see which dependencies have newer
# versions available, run `flutter pub outdated`.
dependencies:
  flutter:
    sdk: flutter

  # The following adds the Cupertino Icons font to your application.
  # Use with the CupertinoIcons class for iOS style icons.
  cupertino_icons: ^1.0.8

  # BLoC State Management
  flutter_bloc: ^8.0.0
  bloc: ^8.0.0
  bloc_concurrency: ^0.2.5

  # WebSocket Communication
  web_socket_channel: ^3.0.3

  # Camera Integration
  camera: ^0.11.0

  # Permissions Handling
  permission_handler: ^11.3.0

  # Code Generation
  freezed_annotation: ^2.4.0
  json_annotation: ^4.9.0

  # Dependency Injection
  get_it: ^7.7.0
  injectable: ^2.4.2

  # Image Processing
  image: ^4.2.0

  # Reactive Streams
  rxdart: ^0.27.7

  # Screen Wake Lock
  wakelock_plus: ^1.2.8

  # Network Connectivity Monitoring
  connectivity_plus: ^6.0.5

  # HTTP Clients
  http: ^1.2.2
  dio: ^5.8.0

  # Dio Extensions & Interceptors
  dio_refresh_token: ^0.0.1
  dio_smart_retry: ^7.0.1

  # REST API Code Generation
  retrofit: ^4.4.2

  # Environment Variables Management
  flutter_dotenv: ^5.2.1

  # Functional Programming
  dartz: ^0.10.1

dev_dependencies:
  flutter_test:
    sdk: flutter

  # The "flutter_lints" package below contains a set of recommended lints to
  # encourage good coding practices. The lint set provided by the package is
  # activated in the `analysis_options.yaml` file located at the root of your
  # package. See that file for information about deactivating specific lint
  # rules and activating additional ones.
  flutter_lints: ^5.0.0

  # Code Generation Tools
  freezed: ^2.5.0
  json_serializable: ^6.8.0
  retrofit_generator: ^9.2.0

  # Dependency Injection Generator
  injectable_generator: ^2.6.1

  # TDD Enhanced Testing Dependencies
  bloc_test: ^9.0.0
  mocktail: ^1.0.4
  fake_async: ^1.3.1
  test: ^1.24.0
  integration_test:
    sdk: flutter
  plugin_platform_interface: ^2.1.0
  camera_platform_interface: ^2.10.0
  stream_transform: ^2.1.0

  # Test Utilities for TDD
  golden_toolkit: ^0.15.0
  network_image_mock: ^2.1.1
  permission_handler_platform_interface: ^4.3.0
  build_runner: ^2.5.2

  # Flutter Flavors Management
  flutter_flavorizr: ^2.4.1

# For information on the generic Dart part of this file, see the
# following page: https://dart.dev/tools/pub/pubspec

# The following section is specific to Flutter packages.
flutter:
  # The following line ensures that the Material Icons font is
  # included with your application, so that you can use the icons in
  # the material Icons class.
  uses-material-design: true

  # To add assets to your application, add an assets section, like this:
  # assets:
  #   - images/a_dot_burr.jpeg
  #   - images/a_dot_ham.jpeg

  # An image asset can refer to one or more resolution-specific "variants", see
  # https://flutter.dev/to/resolution-aware-images

  # For details regarding adding assets from package dependencies, see
  # https://flutter.dev/to/asset-from-package

  # To add custom fonts to your application, add a fonts section here,
  # in this "flutter" section. Each entry in this list should have a
  # "family" key with the font family name, and a "fonts" key with a
  # list giving the asset and other descriptors for the font. For
  # example:
  # fonts:
  #   - family: Schyler
  #     fonts:
  #       - asset: fonts/Schyler-Regular.ttf
  #       - asset: fonts/Schyler-Italic.ttf
  #         style: italic
  #   - family: Trajan Pro
  #     fonts:
  #       - asset: fonts/TrajanPro.ttf
  #       - asset: fonts/TrajanPro_Bold.ttf
  #         weight: 700
  #
  # For details regarding fonts from package dependencies,
  # see https://flutter.dev/to/font-from-package
