// Mocks generated by Mockito 5.4.6 from annotations
// in face_check_in_flutter/test/features/check_in/bloc/check_in_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i9;
import 'dart:ui' as _i14;

import 'package:camera/camera.dart' as _i5;
import 'package:camera_platform_interface/camera_platform_interface.dart'
    as _i4;
import 'package:face_check_in_flutter/core/config/websocket_config.dart' as _i3;
import 'package:face_check_in_flutter/core/services/websocket_service.dart'
    as _i11;
import 'package:face_check_in_flutter/domain/services/camera_service.dart'
    as _i13;
import 'package:face_check_in_flutter/domain/services/permission_service.dart'
    as _i8;
import 'package:face_check_in_flutter/features/check_in/bloc/check_in_bloc.dart'
    as _i12;
import 'package:flutter/foundation.dart' as _i7;
import 'package:flutter/material.dart' as _i6;
import 'package:flutter/services.dart' as _i15;
import 'package:mockito/mockito.dart' as _i1;
import 'package:permission_handler/permission_handler.dart' as _i10;
import 'package:web_socket_channel/web_socket_channel.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeWebSocketChannel_0 extends _i1.SmartFake
    implements _i2.WebSocketChannel {
  _FakeWebSocketChannel_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeWebSocketConfig_1 extends _i1.SmartFake
    implements _i3.WebSocketConfig {
  _FakeWebSocketConfig_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeMediaSettings_2 extends _i1.SmartFake implements _i4.MediaSettings {
  _FakeMediaSettings_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeCameraDescription_3 extends _i1.SmartFake
    implements _i5.CameraDescription {
  _FakeCameraDescription_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeCameraValue_4 extends _i1.SmartFake implements _i5.CameraValue {
  _FakeCameraValue_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeXFile_5 extends _i1.SmartFake implements _i5.XFile {
  _FakeXFile_5(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeWidget_6 extends _i1.SmartFake implements _i6.Widget {
  _FakeWidget_6(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);

  @override
  String toString({_i7.DiagnosticLevel? minLevel = _i7.DiagnosticLevel.info}) =>
      super.toString();
}

/// A class which mocks [PermissionService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPermissionService extends _i1.Mock implements _i8.PermissionService {
  MockPermissionService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<_i10.PermissionStatus> requestCameraPermission() =>
      (super.noSuchMethod(
            Invocation.method(#requestCameraPermission, []),
            returnValue: _i9.Future<_i10.PermissionStatus>.value(
              _i10.PermissionStatus.denied,
            ),
          )
          as _i9.Future<_i10.PermissionStatus>);

  @override
  _i9.Future<_i10.PermissionStatus> getCameraPermissionStatus() =>
      (super.noSuchMethod(
            Invocation.method(#getCameraPermissionStatus, []),
            returnValue: _i9.Future<_i10.PermissionStatus>.value(
              _i10.PermissionStatus.denied,
            ),
          )
          as _i9.Future<_i10.PermissionStatus>);

  @override
  _i9.Future<bool> openAppSettings() =>
      (super.noSuchMethod(
            Invocation.method(#openAppSettings, []),
            returnValue: _i9.Future<bool>.value(false),
          )
          as _i9.Future<bool>);
}

/// A class which mocks [WebSocketService].
///
/// See the documentation for Mockito's code generation for more information.
class MockWebSocketService extends _i1.Mock implements _i11.WebSocketService {
  MockWebSocketService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.WebSocketConnector get connector =>
      (super.noSuchMethod(
            Invocation.getter(#connector),
            returnValue:
                (Uri uri) => _FakeWebSocketChannel_0(
                  this,
                  Invocation.getter(#connector),
                ),
          )
          as _i11.WebSocketConnector);

  @override
  _i9.Stream<_i12.ConnectionStatus> get connectionStatus =>
      (super.noSuchMethod(
            Invocation.getter(#connectionStatus),
            returnValue: _i9.Stream<_i12.ConnectionStatus>.empty(),
          )
          as _i9.Stream<_i12.ConnectionStatus>);

  @override
  _i9.Stream<Map<String, dynamic>> get messages =>
      (super.noSuchMethod(
            Invocation.getter(#messages),
            returnValue: _i9.Stream<Map<String, dynamic>>.empty(),
          )
          as _i9.Stream<Map<String, dynamic>>);

  @override
  _i9.Stream<_i11.ConnectionMetrics> get metrics =>
      (super.noSuchMethod(
            Invocation.getter(#metrics),
            returnValue: _i9.Stream<_i11.ConnectionMetrics>.empty(),
          )
          as _i9.Stream<_i11.ConnectionMetrics>);

  @override
  _i12.ConnectionStatus get currentStatus =>
      (super.noSuchMethod(
            Invocation.getter(#currentStatus),
            returnValue: _i12.ConnectionStatus.disconnected,
          )
          as _i12.ConnectionStatus);

  @override
  bool get isConnected =>
      (super.noSuchMethod(Invocation.getter(#isConnected), returnValue: false)
          as bool);

  @override
  _i3.WebSocketConfig get config =>
      (super.noSuchMethod(
            Invocation.getter(#config),
            returnValue: _FakeWebSocketConfig_1(
              this,
              Invocation.getter(#config),
            ),
          )
          as _i3.WebSocketConfig);

  @override
  set connector(_i11.WebSocketConnector? _connector) => super.noSuchMethod(
    Invocation.setter(#connector, _connector),
    returnValueForMissingStub: null,
  );

  @override
  void updateConfig(_i3.WebSocketConfig? newConfig) => super.noSuchMethod(
    Invocation.method(#updateConfig, [newConfig]),
    returnValueForMissingStub: null,
  );

  @override
  _i9.Future<bool> testConnection({String? testUrl}) =>
      (super.noSuchMethod(
            Invocation.method(#testConnection, [], {#testUrl: testUrl}),
            returnValue: _i9.Future<bool>.value(false),
          )
          as _i9.Future<bool>);

  @override
  _i9.Future<bool> connect({String? customUrl}) =>
      (super.noSuchMethod(
            Invocation.method(#connect, [], {#customUrl: customUrl}),
            returnValue: _i9.Future<bool>.value(false),
          )
          as _i9.Future<bool>);

  @override
  _i9.Future<void> disconnect() =>
      (super.noSuchMethod(
            Invocation.method(#disconnect, []),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  bool sendMessage(Map<String, dynamic>? message) =>
      (super.noSuchMethod(
            Invocation.method(#sendMessage, [message]),
            returnValue: false,
          )
          as bool);

  @override
  bool sendImageFrame(String? base64Image) =>
      (super.noSuchMethod(
            Invocation.method(#sendImageFrame, [base64Image]),
            returnValue: false,
          )
          as bool);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [CameraService].
///
/// See the documentation for Mockito's code generation for more information.
class MockCameraService extends _i1.Mock implements _i13.CameraService {
  MockCameraService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<void> initialize() =>
      (super.noSuchMethod(
            Invocation.method(#initialize, []),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  _i9.Future<void> startImageStream() =>
      (super.noSuchMethod(
            Invocation.method(#startImageStream, []),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  _i9.Future<void> stopImageStream() =>
      (super.noSuchMethod(
            Invocation.method(#stopImageStream, []),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [CameraController].
///
/// See the documentation for Mockito's code generation for more information.
class MockCameraController extends _i1.Mock implements _i5.CameraController {
  MockCameraController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.MediaSettings get mediaSettings =>
      (super.noSuchMethod(
            Invocation.getter(#mediaSettings),
            returnValue: _FakeMediaSettings_2(
              this,
              Invocation.getter(#mediaSettings),
            ),
          )
          as _i4.MediaSettings);

  @override
  _i5.CameraDescription get description =>
      (super.noSuchMethod(
            Invocation.getter(#description),
            returnValue: _FakeCameraDescription_3(
              this,
              Invocation.getter(#description),
            ),
          )
          as _i5.CameraDescription);

  @override
  _i5.ResolutionPreset get resolutionPreset =>
      (super.noSuchMethod(
            Invocation.getter(#resolutionPreset),
            returnValue: _i5.ResolutionPreset.low,
          )
          as _i5.ResolutionPreset);

  @override
  bool get enableAudio =>
      (super.noSuchMethod(Invocation.getter(#enableAudio), returnValue: false)
          as bool);

  @override
  int get cameraId =>
      (super.noSuchMethod(Invocation.getter(#cameraId), returnValue: 0) as int);

  @override
  _i5.CameraValue get value =>
      (super.noSuchMethod(
            Invocation.getter(#value),
            returnValue: _FakeCameraValue_4(this, Invocation.getter(#value)),
          )
          as _i5.CameraValue);

  @override
  set value(_i5.CameraValue? newValue) => super.noSuchMethod(
    Invocation.setter(#value, newValue),
    returnValueForMissingStub: null,
  );

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  void debugCheckIsDisposed() => super.noSuchMethod(
    Invocation.method(#debugCheckIsDisposed, []),
    returnValueForMissingStub: null,
  );

  @override
  _i9.Future<void> initialize() =>
      (super.noSuchMethod(
            Invocation.method(#initialize, []),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  _i9.Future<void> prepareForVideoRecording() =>
      (super.noSuchMethod(
            Invocation.method(#prepareForVideoRecording, []),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  _i9.Future<void> pausePreview() =>
      (super.noSuchMethod(
            Invocation.method(#pausePreview, []),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  _i9.Future<void> resumePreview() =>
      (super.noSuchMethod(
            Invocation.method(#resumePreview, []),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  _i9.Future<void> setDescription(_i5.CameraDescription? description) =>
      (super.noSuchMethod(
            Invocation.method(#setDescription, [description]),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  _i9.Future<_i5.XFile> takePicture() =>
      (super.noSuchMethod(
            Invocation.method(#takePicture, []),
            returnValue: _i9.Future<_i5.XFile>.value(
              _FakeXFile_5(this, Invocation.method(#takePicture, [])),
            ),
          )
          as _i9.Future<_i5.XFile>);

  @override
  _i9.Future<void> startImageStream(_i5.onLatestImageAvailable? onAvailable) =>
      (super.noSuchMethod(
            Invocation.method(#startImageStream, [onAvailable]),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  _i9.Future<void> stopImageStream() =>
      (super.noSuchMethod(
            Invocation.method(#stopImageStream, []),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  _i9.Future<void> startVideoRecording({
    _i5.onLatestImageAvailable? onAvailable,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#startVideoRecording, [], {
              #onAvailable: onAvailable,
            }),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  _i9.Future<_i5.XFile> stopVideoRecording() =>
      (super.noSuchMethod(
            Invocation.method(#stopVideoRecording, []),
            returnValue: _i9.Future<_i5.XFile>.value(
              _FakeXFile_5(this, Invocation.method(#stopVideoRecording, [])),
            ),
          )
          as _i9.Future<_i5.XFile>);

  @override
  _i9.Future<void> pauseVideoRecording() =>
      (super.noSuchMethod(
            Invocation.method(#pauseVideoRecording, []),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  _i9.Future<void> resumeVideoRecording() =>
      (super.noSuchMethod(
            Invocation.method(#resumeVideoRecording, []),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  _i6.Widget buildPreview() =>
      (super.noSuchMethod(
            Invocation.method(#buildPreview, []),
            returnValue: _FakeWidget_6(
              this,
              Invocation.method(#buildPreview, []),
            ),
          )
          as _i6.Widget);

  @override
  _i9.Future<double> getMaxZoomLevel() =>
      (super.noSuchMethod(
            Invocation.method(#getMaxZoomLevel, []),
            returnValue: _i9.Future<double>.value(0.0),
          )
          as _i9.Future<double>);

  @override
  _i9.Future<double> getMinZoomLevel() =>
      (super.noSuchMethod(
            Invocation.method(#getMinZoomLevel, []),
            returnValue: _i9.Future<double>.value(0.0),
          )
          as _i9.Future<double>);

  @override
  _i9.Future<void> setZoomLevel(double? zoom) =>
      (super.noSuchMethod(
            Invocation.method(#setZoomLevel, [zoom]),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  _i9.Future<void> setFlashMode(_i5.FlashMode? mode) =>
      (super.noSuchMethod(
            Invocation.method(#setFlashMode, [mode]),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  _i9.Future<void> setExposureMode(_i5.ExposureMode? mode) =>
      (super.noSuchMethod(
            Invocation.method(#setExposureMode, [mode]),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  _i9.Future<void> setExposurePoint(_i14.Offset? point) =>
      (super.noSuchMethod(
            Invocation.method(#setExposurePoint, [point]),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  _i9.Future<double> getMinExposureOffset() =>
      (super.noSuchMethod(
            Invocation.method(#getMinExposureOffset, []),
            returnValue: _i9.Future<double>.value(0.0),
          )
          as _i9.Future<double>);

  @override
  _i9.Future<double> getMaxExposureOffset() =>
      (super.noSuchMethod(
            Invocation.method(#getMaxExposureOffset, []),
            returnValue: _i9.Future<double>.value(0.0),
          )
          as _i9.Future<double>);

  @override
  _i9.Future<double> getExposureOffsetStepSize() =>
      (super.noSuchMethod(
            Invocation.method(#getExposureOffsetStepSize, []),
            returnValue: _i9.Future<double>.value(0.0),
          )
          as _i9.Future<double>);

  @override
  _i9.Future<double> setExposureOffset(double? offset) =>
      (super.noSuchMethod(
            Invocation.method(#setExposureOffset, [offset]),
            returnValue: _i9.Future<double>.value(0.0),
          )
          as _i9.Future<double>);

  @override
  _i9.Future<void> lockCaptureOrientation([
    _i15.DeviceOrientation? orientation,
  ]) =>
      (super.noSuchMethod(
            Invocation.method(#lockCaptureOrientation, [orientation]),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  _i9.Future<void> setFocusMode(_i5.FocusMode? mode) =>
      (super.noSuchMethod(
            Invocation.method(#setFocusMode, [mode]),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  _i9.Future<void> unlockCaptureOrientation() =>
      (super.noSuchMethod(
            Invocation.method(#unlockCaptureOrientation, []),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  _i9.Future<void> setFocusPoint(_i14.Offset? point) =>
      (super.noSuchMethod(
            Invocation.method(#setFocusPoint, [point]),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  bool supportsImageStreaming() =>
      (super.noSuchMethod(
            Invocation.method(#supportsImageStreaming, []),
            returnValue: false,
          )
          as bool);

  @override
  _i9.Future<void> dispose() =>
      (super.noSuchMethod(
            Invocation.method(#dispose, []),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  void removeListener(_i14.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void addListener(_i14.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [PermissionService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPermissionServiceCustom extends _i1.Mock
    implements _i8.PermissionService {
  MockPermissionServiceCustom() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<_i10.PermissionStatus> requestCameraPermission() =>
      (super.noSuchMethod(
            Invocation.method(#requestCameraPermission, []),
            returnValue: _i9.Future<_i10.PermissionStatus>.value(
              _i10.PermissionStatus.denied,
            ),
          )
          as _i9.Future<_i10.PermissionStatus>);

  @override
  _i9.Future<_i10.PermissionStatus> getCameraPermissionStatus() =>
      (super.noSuchMethod(
            Invocation.method(#getCameraPermissionStatus, []),
            returnValue: _i9.Future<_i10.PermissionStatus>.value(
              _i10.PermissionStatus.denied,
            ),
          )
          as _i9.Future<_i10.PermissionStatus>);

  @override
  _i9.Future<bool> openAppSettings() =>
      (super.noSuchMethod(
            Invocation.method(#openAppSettings, []),
            returnValue: _i9.Future<bool>.value(false),
          )
          as _i9.Future<bool>);
}
