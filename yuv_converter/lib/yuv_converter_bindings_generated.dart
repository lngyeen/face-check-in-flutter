// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `src/yuv_converter.h`.
///
/// Regenerate bindings with `dart run ffigen --config ffigen.yaml`.
///
class YuvConverterBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  YuvConverterBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  YuvConverterBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// For 3-plane YUV (I420 format)
  ffi.Pointer<RgbImage> convert_yuv_to_rgb_planar(
    ffi.Pointer<ffi.Uint8> y_plane,
    ffi.Pointer<ffi.Uint8> u_plane,
    ffi.Pointer<ffi.Uint8> v_plane,
    int y_stride,
    int uv_stride,
    int width,
    int height,
  ) {
    return _convert_yuv_to_rgb_planar(
      y_plane,
      u_plane,
      v_plane,
      y_stride,
      uv_stride,
      width,
      height,
    );
  }

  late final _convert_yuv_to_rgb_planarPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<RgbImage> Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('convert_yuv_to_rgb_planar');
  late final _convert_yuv_to_rgb_planar =
      _convert_yuv_to_rgb_planarPtr.asFunction<
          ffi.Pointer<RgbImage> Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              int,
              int,
              int,
              int)>();

  /// For 2-plane YUV (NV12 format)
  ffi.Pointer<RgbImage> convert_yuv_to_rgb_biplanar(
    ffi.Pointer<ffi.Uint8> y_plane,
    ffi.Pointer<ffi.Uint8> uv_plane,
    int y_stride,
    int uv_stride,
    int uv_pixel_stride,
    int width,
    int height,
    int format,
  ) {
    return _convert_yuv_to_rgb_biplanar(
      y_plane,
      uv_plane,
      y_stride,
      uv_stride,
      uv_pixel_stride,
      width,
      height,
      format,
    );
  }

  late final _convert_yuv_to_rgb_biplanarPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<RgbImage> Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('convert_yuv_to_rgb_biplanar');
  late final _convert_yuv_to_rgb_biplanar =
      _convert_yuv_to_rgb_biplanarPtr.asFunction<
          ffi.Pointer<RgbImage> Function(ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, int, int, int, int, int, int)>();

  void free_image_memory(
    ffi.Pointer<RgbImage> image,
  ) {
    return _free_image_memory(
      image,
    );
  }

  late final _free_image_memoryPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<RgbImage>)>>(
          'free_image_memory');
  late final _free_image_memory =
      _free_image_memoryPtr.asFunction<void Function(ffi.Pointer<RgbImage>)>();
}

/// Represents an RGB image buffer
final class RgbImage extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> data;

  @ffi.Int()
  external int width;

  @ffi.Int()
  external int height;
}

/// Enum to specify the bi-planar YUV format.
enum BiplanarFormat {
  /// U plane is first, V plane is second (UVUV...)
  NV12(0),

  /// V plane is first, U plane is second (VUVU...)
  NV21(1);

  final int value;
  const BiplanarFormat(this.value);

  static BiplanarFormat fromValue(int value) => switch (value) {
        0 => NV12,
        1 => NV21,
        _ => throw ArgumentError('Unknown value for BiplanarFormat: $value'),
      };
}
